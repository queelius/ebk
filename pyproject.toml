[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "ebk"
version = "0.3.0"
description = "A lightweight, extensible tool for managing eBook metadata"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Alex Towell", email = "lex@metafunctor.com"}
]
maintainers = [
    {name = "Alex Towell", email = "lex@metafunctor.com"}
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: End Users/Desktop",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries",
    "Topic :: Text Processing :: Markup",
    "Topic :: Utilities",
]
keywords = ["ebook", "metadata", "library", "books", "management", "calibre"]
requires-python = ">=3.10"

# Core dependencies only - keep it minimal
dependencies = [
    "typer>=0.9.0",
    "rich>=13.0.0",
    "lxml>=4.9.0",
    "python-slugify>=8.0.0",
    "pyyaml>=6.0",
    "pypdf>=3.0.0",  # Modern PDF library
    "PyMuPDF>=1.23.0",  # For advanced PDF processing
    "ebooklib>=0.18",
    "Pillow>=10.0.0",
    "jmespath>=1.0.0",
    "jinja2>=3.0.0",
    "xmltodict>=0.13.0",
]

[project.urls]
Homepage = "https://github.com/queelius/ebk"
Documentation = "https://github.com/queelius/ebk/wiki"
Repository = "https://github.com/queelius/ebk.git"
Issues = "https://github.com/queelius/ebk/issues"
Changelog = "https://github.com/queelius/ebk/blob/main/CHANGELOG.md"

[project.scripts]
ebk = "ebk.cli:app"

[project.entry-points."ebk.plugins"]
# Bundled plugins - automatically discovered
google_books = "integrations.metadata:GoogleBooksExtractor"
network_analyzer = "integrations.network:NetworkAnalyzer"

[project.optional-dependencies]
# Streamlit web dashboard
streamlit = [
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "altair>=5.0.0",
]

# Metadata extractors
metadata = [
    "aiohttp>=3.8.0",  # For API calls
    "beautifulsoup4>=4.12.0",  # For HTML parsing
    "httpx>=0.24.0",  # Alternative HTTP client
]

google-books = [
    "aiohttp>=3.8.0",
]

# Network/graph analysis
network = [
    # Basic network plugin has no extra deps
]

network-advanced = [
    "networkx>=3.0",
    "matplotlib>=3.5.0", 
    "pyvis>=0.3.0",
    "plotly>=5.0.0",
]

# LLM integration - works with any OpenAI-compatible API
# (OpenAI, Ollama, LocalAI, vLLM, LM Studio, etc.)
llm = [
    "httpx>=0.24.0",  # Modern async HTTP client
    "pydantic>=2.0.0",  # For configuration and response validation
]

# MCP server for AI assistants
mcp = [
    "mcp>=0.1.0",
    "pydantic>=2.0.0",
]

# Development tools
dev = [
    "pytest>=7.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-cov>=4.0.0",
    "black>=23.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
]

# Documentation
docs = [
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.0.0",
    "mkdocstrings[python]>=0.24.0",
]

# All optional dependencies
all = [
    # Include all integration deps
    "streamlit>=1.28.0",
    "pandas>=2.0.0",
    "altair>=5.0.0",
    "aiohttp>=3.8.0",
    "beautifulsoup4>=4.12.0",
    "httpx>=0.24.0",
    "networkx>=3.0",
    "matplotlib>=3.5.0",
    "pyvis>=0.3.0",
    "plotly>=5.0.0",
]

# Legacy aliases for backward compatibility
viz = ["ebk[network-advanced]"]

[tool.setuptools]
packages = ["ebk", "ebk.plugins", "integrations"]
include-package-data = true

[tool.setuptools.package-data]
ebk = [
    "templates/**/*",
    "static/**/*",
]
integrations = [
    "*/templates/**/*",
    "*/static/**/*",
]

[tool.black]
line-length = 100
target-version = ['py310', 'py311', 'py312']
include = '\.pyi?$'

[tool.ruff]
line-length = 100
target-version = "py310"

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "W191",  # indentation contains tabs
]

[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
disallow_any_generics = false
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
]

[tool.coverage.run]
source = ["ebk"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]