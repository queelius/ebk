{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ebk - eBook Library Manager","text":"<p>Welcome to the ebk documentation! ebk is a lightweight and versatile tool for managing eBook metadata with a comprehensive fluent API and rich CLI.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>\ud83d\udcda Fluent Python API - Comprehensive programmatic interface with method chaining</li> <li>\ud83c\udfa8 Rich CLI - Beautiful terminal interface powered by Typer and Rich</li> <li>\ud83d\udce5 Multiple Import Sources - Calibre, raw ebooks, ZIP archives</li> <li>\ud83d\udd0d Advanced Search - Regex, JMESPath, and fluent query builders</li> <li>\ud83d\udce4 Flexible Export - Hugo sites, ZIP archives, symlink DAGs</li> <li>\ud83e\udd16 Smart Recommendations - Find similar books based on metadata</li> <li>\ud83d\udd17 Optional Integrations - Web UI, AI assistants, visualizations</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code>from ebk import Library\n\n# Open a library and find Python books published after 2020\nlib = Library.open(\"~/ebooks\")\nrecent_python = (lib.query()\n    .where(\"subjects\", \"Python\", \"contains\")\n    .where(\"date\", \"2020\", \"&gt;=\")\n    .order_by(\"title\")\n    .execute())\n\n# Get recommendations based on your favorites\nrecommendations = lib.recommend(based_on=[\"book_id_1\", \"book_id_2\"])\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<ul> <li>Installation - Install ebk and optional features</li> <li>Quick Start - Get up and running in minutes</li> <li>CLI Reference - Complete command reference</li> </ul>"},{"location":"#architecture","title":"Architecture","text":"<p>ebk follows a clean, modular architecture:</p> <pre><code>graph TD\n    A[Core Library&lt;br/&gt;ebk.library] --&gt; B[CLI&lt;br/&gt;ebk.cli]\n    A --&gt; C[Import/Export&lt;br/&gt;Modules]\n    A --&gt; D[Integrations&lt;br/&gt;Optional]\n    D --&gt; E[Streamlit&lt;br/&gt;Web UI]\n    D --&gt; F[MCP Server&lt;br/&gt;AI Assistants]\n    D --&gt; G[Visualizations&lt;br/&gt;Network Graphs]</code></pre>"},{"location":"#support","title":"Support","text":"<ul> <li>\ud83d\udc1b Report Issues</li> <li>\ud83d\udcac Discussions</li> <li>\ud83d\udce7 Contact</li> </ul>"},{"location":"API_GUIDE/","title":"ebk Fluent API Guide","text":"<p>The ebk library provides a comprehensive, fluent API for programmatic ebook library management.</p>"},{"location":"API_GUIDE/#quick-start","title":"Quick Start","text":"<pre><code>from ebk import Library\n\n# Open or create a library\nlib = Library.open(\"/path/to/library\")\n# or\nlib = Library.create(\"/path/to/new/library\")\n\n# Add books\nlib.add_entry(\n    title=\"The Python Book\",\n    creators=[\"John Doe\", \"Jane Smith\"],\n    subjects=[\"Programming\", \"Python\"],\n    language=\"en\",\n    date=\"2023-01-15\"\n).save()\n\n# Search and query\npython_books = lib.search(\"Python\")\nrecent_books = lib.query().where(\"date\", \"2023\", \"&gt;=\").execute()\n</code></pre>"},{"location":"API_GUIDE/#core-concepts","title":"Core Concepts","text":""},{"location":"API_GUIDE/#library","title":"Library","text":"<p>The <code>Library</code> class is the main entry point for all operations:</p> <pre><code>from ebk import Library\n\n# Create from different sources\nlib = Library.create(\"/path/to/library\")\nlib = Library.from_calibre(\"/calibre/library\", \"/output/path\")\nlib = Library.from_ebooks(\"/ebooks/folder\", \"/output/path\")\n\n# Basic operations\nprint(f\"Library has {len(lib)} entries\")\n\n# Iterate over entries\nfor entry in lib:\n    print(f\"{entry.title} by {', '.join(entry.creators)}\")\n</code></pre>"},{"location":"API_GUIDE/#entry","title":"Entry","text":"<p>Individual books are represented as <code>Entry</code> objects with fluent methods:</p> <pre><code># Get an entry\nentry = lib[0]  # By index\nentry = lib.find(\"unique-id-here\")  # By ID\n\n# Access properties\nprint(entry.title)\nprint(entry.creators)\nprint(entry.subjects)\n\n# Modify with chaining\nentry.set(\"publisher\", \"Tech Press\") \\\n     .add_creator(\"Co Author\") \\\n     .add_subject(\"Advanced Topics\") \\\n     .save()\n\n# Update multiple fields\nentry.update(\n    edition=\"2nd\",\n    pages=450,\n    isbn=\"978-1234567890\"\n)\n</code></pre>"},{"location":"API_GUIDE/#querybuilder","title":"QueryBuilder","text":"<p>The query builder provides powerful, chainable search capabilities:</p> <pre><code># Simple queries\nenglish_books = lib.query().where(\"language\", \"en\").execute()\n\n# Complex queries with operators\nresults = (lib.query()\n    .where(\"language\", \"en\")\n    .where(\"date\", \"2020\", \"&gt;=\")\n    .where(\"subjects\", \"Python\", \"contains\")\n    .order_by(\"title\")\n    .take(10)\n    .execute())\n\n# Custom filters\nresults = lib.query().where_lambda(\n    lambda e: len(e.get(\"creators\", [])) &gt; 1 and e.get(\"pages\", 0) &gt; 300\n).execute()\n\n# Search across multiple fields\nresults = lib.query().where_any(\n    [\"title\", \"description\", \"subjects\"], \n    \"machine learning\"\n).execute()\n\n# Count and existence\ncount = lib.query().where(\"language\", \"en\").count()\nhas_french = lib.query().where(\"language\", \"fr\").exists()\nfirst_match = lib.query().where(\"publisher\", \"O'Reilly\").first()\n</code></pre>"},{"location":"API_GUIDE/#common-operations","title":"Common Operations","text":""},{"location":"API_GUIDE/#adding-books","title":"Adding Books","text":"<pre><code># Single entry\nentry = lib.add_entry(\n    title=\"Deep Learning\",\n    creators=[\"Ian Goodfellow\", \"Yoshua Bengio\"],\n    subjects=[\"AI\", \"Machine Learning\", \"Neural Networks\"],\n    language=\"en\",\n    date=\"2016-11-18\",\n    isbn=\"9780262035613\",\n    publisher=\"MIT Press\"\n)\n\n# Multiple entries\nentries = [\n    {\"title\": \"Book 1\", \"creators\": [\"Author 1\"]},\n    {\"title\": \"Book 2\", \"creators\": [\"Author 2\"]}\n]\nlib.add_entries(entries).save()\n\n# From files (requires actual file handling)\nentry = lib.add_entry(\n    title=\"My Book\",\n    creators=[\"Me\"],\n    file_paths=[\"book.pdf\", \"book.epub\"],\n    cover_path=\"cover.jpg\"\n)\n</code></pre>"},{"location":"API_GUIDE/#searching-and-filtering","title":"Searching and Filtering","text":"<pre><code># Simple text search\nresults = lib.search(\"Python\")\nresults = lib.search(\"Doe\", fields=[\"creators\"])\n\n# Find specific entries\nbooks = lib.find_by_title(\"Python Programming\")\nentry = lib.find(\"unique-id-123\")\n\n# Filter with predicates\nfiltered = lib.filter(lambda e: e.get(\"year\", 0) &gt; 2020)\npython_books = lib.filter(lambda e: \"Python\" in e.get(\"subjects\", []))\n\n# Query builder for complex searches\nquery = (lib.query()\n    .where(\"language\", \"en\")\n    .where(\"subjects\", \"Programming\", \"contains\")\n    .where_lambda(lambda e: e.get(\"pages\", 0) &gt; 200)\n    .order_by(\"date\", descending=True))\n\nresults = query.execute()\ncount = query.count()\nfirst = query.first()\n</code></pre>"},{"location":"API_GUIDE/#modifying-entries","title":"Modifying Entries","text":"<pre><code># Update single entry\nentry = lib.find(\"some-id\")\nentry.title = \"Updated Title\"\nentry.add_creator(\"New Author\")\nentry.add_subject(\"New Topic\")\nentry.save()\n\n# Update multiple entries\nlib.update_all(lambda e: e.set(\"reviewed\", True))\nlib.update_all(lambda e: e.add_subject(\"ebook\") if e.get(\"format\") == \"pdf\" else None)\n\n# Batch tagging\nlib.tag_all(\"to-read\")\nlib.filter(lambda e: e.get(\"year\") == \"2023\").tag_all(\"recent\")\n\n# Remove entries\nlib.remove(\"unique-id\")\nlib.remove_where(lambda e: e.get(\"language\") == \"unknown\")\n</code></pre>"},{"location":"API_GUIDE/#batch-operations","title":"Batch Operations","text":"<pre><code># Queue multiple operations\n(lib.batch()\n    .add_entry(title=\"Book 1\", creators=[\"Author 1\"])\n    .add_entry(title=\"Book 2\", creators=[\"Author 2\"])\n    .update(\"some-id\", publisher=\"New Publisher\")\n    .remove(\"old-id\")\n    .execute())\n</code></pre>"},{"location":"API_GUIDE/#transactions","title":"Transactions","text":"<pre><code># Automatic rollback on error\ntry:\n    with lib.transaction() as txn_lib:\n        txn_lib.add_entry(title=\"Book 1\", creators=[\"Author\"])\n        txn_lib.remove(\"some-id\")\n        # If error occurs here, all changes are rolled back\n        raise Exception(\"Something went wrong\")\nexcept:\n    # Library remains unchanged\n    pass\n</code></pre>"},{"location":"API_GUIDE/#advanced-features","title":"Advanced Features","text":""},{"location":"API_GUIDE/#merging-libraries","title":"Merging Libraries","text":"<pre><code>lib1 = Library.open(\"/library1\")\nlib2 = Library.open(\"/library2\")\n\n# Different merge operations\nmerged = lib1.union(lib2)        # All unique entries\nmerged = lib1.intersect(lib2)    # Common entries only\nmerged = lib1.difference(lib2)   # In lib1 but not lib2\n\n# Generic merge\nmerged = lib1.merge(lib2, operation=\"symdiff\")\n</code></pre>"},{"location":"API_GUIDE/#statistics-and-analysis","title":"Statistics and Analysis","text":"<pre><code># Get library statistics\nstats = lib.stats()\nprint(f\"Total books: {stats['total_entries']}\")\nprint(f\"Languages: {stats['languages']}\")\nprint(f\"Top authors: {list(stats['creators'].items())[:5]}\")\nprint(f\"Popular subjects: {list(stats['subjects'].items())[:10]}\")\n\n# Group entries\nby_language = lib.group_by(\"language\")\nby_year = lib.group_by(\"year\")\nby_author = lib.group_by(\"creators\")\n\n# Find duplicates\nduplicate_titles = lib.duplicates(by=\"title\")\nfor title, entries in duplicate_titles:\n    print(f\"'{title}' has {len(entries)} copies\")\n</code></pre>"},{"location":"API_GUIDE/#exporting","title":"Exporting","text":"<pre><code># Export to different formats\nlib.export_to_zip(\"/path/to/library.zip\")\n\nlib.export_to_hugo(\n    \"/path/to/hugo/site\",\n    organize_by=\"year\"  # or \"language\", \"subject\", \"creator\", \"flat\"\n)\n\n# Export as navigable symlink DAG\nlib.export_to_symlink_dag(\n    \"/path/to/dag\",\n    tag_field=\"subjects\",    # Field to use for hierarchy\n    include_files=True,      # Copy actual ebook files\n    create_index=True        # Generate HTML indexes\n)\n\n# Export as graph (co-authorship or subject networks)\nlib.export_graph(\n    \"library.graphml\",       # Supports .graphml, .gexf, .json\n    graph_type=\"coauthor\",   # or \"subject\"\n    min_connections=2        # Filter edges with fewer connections\n)\n\n# Chain operations before export\n(lib.filter(lambda e: e.get(\"language\") == \"en\")\n    .tag_all(\"english\")\n    .export_to_hugo(\"/hugo/site\", organize_by=\"subject\"))\n</code></pre>"},{"location":"API_GUIDE/#jmespath-queries","title":"JMESPath Queries","text":"<pre><code># Use JMESPath for complex queries\nresults = lib.query().jmespath(\n    \"[?language=='en' &amp;&amp; contains(subjects, 'Python')]\"\n).execute()\n\nresults = lib.query().jmespath(\n    \"[?year &gt; `2020`].{title: title, authors: creators}\"\n).execute()\n</code></pre>"},{"location":"API_GUIDE/#finding-similar-books-and-recommendations","title":"Finding Similar Books and Recommendations","text":"<pre><code># Find books similar to a specific entry\nsimilar = lib.find_similar(\"book_unique_id\", threshold=0.7)\n# or by Entry object\nentry = lib.find(\"book_unique_id\")\nsimilar = lib.find_similar(entry, threshold=0.5)\n\n# Get recommendations\n# Random from highly-rated or popular books\nrecommended = lib.recommend(limit=10)\n\n# Based on specific books (collaborative filtering style)\nrecommended = lib.recommend(\n    based_on=[\"book_id_1\", \"book_id_2\", \"book_id_3\"],\n    limit=20\n)\n\n# Analyze reading patterns\nanalysis = lib.analyze_reading_patterns()\nprint(f\"Subject diversity (entropy): {analysis['reading_diversity']['subject_entropy']}\")\nprint(f\"Top genres: {analysis['reading_diversity']['subject_concentration']}\")\nprint(f\"Books per author: {analysis['reading_diversity']['books_per_author']}\")\n</code></pre>"},{"location":"API_GUIDE/#real-world-examples","title":"Real-World Examples","text":""},{"location":"API_GUIDE/#symlink-dag-navigation","title":"Symlink DAG Navigation","text":"<pre><code># Create a browsable view of your library organized by hierarchical tags\nlib = Library.open(\"/my/ebook-library\")\n\n# Basic export with subject hierarchy\nlib.export_to_symlink_dag(\"/my/browsable-library\")\n\n# Organize by authors instead of subjects\nlib.export_to_symlink_dag(\n    \"/my/author-organized-library\",\n    tag_field=\"creators\"\n)\n\n# Filter and export only programming books\n(lib.filter(lambda e: \"Programming\" in e.get(\"subjects\", []))\n    .export_to_symlink_dag(\"/my/programming-books\"))\n</code></pre> <p>This creates a structure like: <pre><code>Programming/\n  Python/\n    Web/\n      Django Web Development \u2192 ../../../_books/book_123\n    Machine Learning/\n      ML with Python \u2192 ../../../_books/book_456\n</code></pre></p>"},{"location":"API_GUIDE/#building-a-reading-list","title":"Building a Reading List","text":"<pre><code># Create a reading list from multiple criteria\nreading_list = Library.create(\"/my/reading-list\")\n\n# Add highly rated Python books from main library\npython_books = (main_lib.query()\n    .where(\"subjects\", \"Python\", \"contains\")\n    .where(\"rating\", 4, \"&gt;=\")\n    .execute())\n\nreading_list.add_entries(python_books)\n\n# Add recent AI books\nai_books = (main_lib.query()\n    .where(\"subjects\", \"Artificial Intelligence\", \"contains\")\n    .where(\"year\", \"2022\", \"&gt;=\")\n    .execute())\n\nreading_list.add_entries(ai_books)\n\n# Tag and export\nreading_list.tag_all(\"to-read\") \\\n           .export_to_hugo(\"/my/website\", organize_by=\"subject\")\n</code></pre>"},{"location":"API_GUIDE/#library-maintenance","title":"Library Maintenance","text":"<pre><code># Clean up library\nlib = Library.open(\"/my/library\")\n\n# Remove entries without files\nlib.remove_where(lambda e: not e.get(\"file_paths\"))\n\n# Fix common issues\nlib.update_all(lambda e: \n    e.set(\"language\", \"en\") if not e.get(\"language\") else None\n)\n\n# Normalize subjects\ndef normalize_subjects(entry):\n    subjects = entry.get(\"subjects\", [])\n    normalized = []\n    for subject in subjects:\n        # Normalize case and spacing\n        normalized.append(subject.strip().title())\n    entry.subjects = normalized\n\nlib.update_all(normalize_subjects)\n\n# Find and handle duplicates\nfor title, duplicates in lib.duplicates(by=\"title\"):\n    print(f\"\\nFound {len(duplicates)} copies of '{title}':\")\n    for i, dup in enumerate(duplicates):\n        print(f\"  {i+1}. ID: {dup.id}, Authors: {dup.creators}\")\n    # Optionally remove duplicates keeping the first\n    for dup in duplicates[1:]:\n        lib.remove(dup.id)\n\nlib.save()\n</code></pre>"},{"location":"API_GUIDE/#creating-a-catalog-website","title":"Creating a Catalog Website","text":"<pre><code># Generate a website with books organized by multiple criteria\nlib = Library.open(\"/my/library\")\n\n# Create different views\nbase_path = Path(\"/my/hugo-site\")\n\n# By year for recent additions\n(lib.filter(lambda e: e.get(\"year\", 0) &gt;= 2020)\n    .export_to_hugo(base_path / \"recent\", organize_by=\"year\"))\n\n# By language\nlib.export_to_hugo(base_path / \"languages\", organize_by=\"language\")\n\n# By subject for browsing\nlib.export_to_hugo(base_path / \"subjects\", organize_by=\"subject\")\n\n# Featured collection\nfeatured = lib.filter(lambda e: \n    e.get(\"rating\", 0) &gt;= 4.5 or \"Award Winner\" in e.get(\"subjects\", [])\n)\nfeatured.export_to_hugo(base_path / \"featured\", organize_by=\"flat\")\n</code></pre>"},{"location":"API_GUIDE/#best-practices","title":"Best Practices","text":"<ol> <li>Always save changes: Use <code>.save()</code> after modifications</li> <li>Use transactions for multi-step operations that should be atomic</li> <li>Chain operations for cleaner code</li> <li>Filter before export to create focused collections</li> <li>Use batch operations for better performance with many changes</li> <li>Handle missing fields with <code>.get()</code> and defaults</li> <li>Use symlink DAG for filesystem-based navigation of tag hierarchies</li> <li>Leverage similarity for discovery and recommendations</li> </ol>"},{"location":"API_GUIDE/#performance-tips","title":"Performance Tips","text":"<ul> <li>Use <code>query()</code> for read-only operations (doesn't modify library)</li> <li>Use <code>filter()</code> when you need a new library instance</li> <li>Batch operations are more efficient than individual updates</li> <li>For large libraries, use <code>.take()</code> and <code>.skip()</code> for pagination</li> <li>JMESPath queries can be faster for complex conditions</li> </ul>"},{"location":"advanced/hugo-export/","title":"Hugo Export with Jinja Templates","text":"<p>The ebk Hugo export now supports flexible organization and templating through Jinja2.</p>"},{"location":"advanced/hugo-export/#basic-usage","title":"Basic Usage","text":"<pre><code># Legacy export (flat structure)\nebk export hugo /path/to/library /path/to/hugo-site\n\n# New Jinja-based export with organization options\nebk export hugo /path/to/library /path/to/hugo-site --jinja --organize-by year\n</code></pre>"},{"location":"advanced/hugo-export/#organization-options","title":"Organization Options","text":"<p>With the <code>--jinja</code> flag, you can organize your library in different ways:</p>"},{"location":"advanced/hugo-export/#flat-default","title":"Flat (default)","text":"<p>All books in one directory: <pre><code>content/library/\n\u251c\u2500\u2500 _index.md\n\u251c\u2500\u2500 book-1-abc12345.md\n\u251c\u2500\u2500 book-2-def67890.md\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"advanced/hugo-export/#by-year","title":"By Year","text":"<p><pre><code>ebk export hugo /path/to/library /path/to/hugo-site --jinja --organize-by year\n</code></pre> <pre><code>content/library/\n\u251c\u2500\u2500 _index.md\n\u251c\u2500\u2500 2023/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 book-1-abc12345.md\n\u251c\u2500\u2500 2024/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 book-2-def67890.md\n\u2514\u2500\u2500 unknown-year/\n    \u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"advanced/hugo-export/#by-language","title":"By Language","text":"<p><pre><code>ebk export hugo /path/to/library /path/to/hugo-site --jinja --organize-by language\n</code></pre> <pre><code>content/library/\n\u251c\u2500\u2500 _index.md\n\u251c\u2500\u2500 en/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 books...\n\u251c\u2500\u2500 es/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 books...\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"advanced/hugo-export/#by-subject","title":"By Subject","text":"<p><pre><code>ebk export hugo /path/to/library /path/to/hugo-site --jinja --organize-by subject\n</code></pre> Books appear in multiple subject directories if they have multiple subjects: <pre><code>content/library/\n\u251c\u2500\u2500 _index.md\n\u251c\u2500\u2500 fiction/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 books...\n\u251c\u2500\u2500 science/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 books...\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"advanced/hugo-export/#by-creator","title":"By Creator","text":"<p><pre><code>ebk export hugo /path/to/library /path/to/hugo-site --jinja --organize-by creator\n</code></pre> Books appear under each of their creators: <pre><code>content/library/\n\u251c\u2500\u2500 _index.md\n\u251c\u2500\u2500 jane-doe/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 books...\n\u251c\u2500\u2500 john-smith/\n\u2502   \u251c\u2500\u2500 _index.md\n\u2502   \u2514\u2500\u2500 books...\n\u2514\u2500\u2500 ...\n</code></pre></p>"},{"location":"advanced/hugo-export/#custom-templates","title":"Custom Templates","text":"<p>You can provide your own Jinja2 templates:</p> <pre><code>ebk export hugo /path/to/library /path/to/hugo-site --jinja \\\n    --template-dir /path/to/custom/templates\n</code></pre> <p>Your template directory should follow this structure: <pre><code>templates/\n\u2514\u2500\u2500 hugo/\n    \u251c\u2500\u2500 book.md      # Individual book page\n    \u251c\u2500\u2500 index.md     # Category index pages\n    \u2514\u2500\u2500 library.md   # Main library index\n</code></pre></p>"},{"location":"advanced/hugo-export/#template-variables","title":"Template Variables","text":""},{"location":"advanced/hugo-export/#bookmd","title":"book.md","text":"<ul> <li><code>book</code>: Dictionary with all metadata fields</li> <li><code>ebook_urls</code>: List of download URLs</li> <li><code>cover_url</code>: Cover image URL</li> </ul>"},{"location":"advanced/hugo-export/#indexmd","title":"index.md","text":"<ul> <li><code>title</code>: Section title</li> <li><code>organize_by</code>: Organization method</li> <li><code>group_key</code>: Current group identifier</li> <li><code>books</code>: List of books in this section</li> <li><code>book_count</code>: Number of books</li> </ul>"},{"location":"advanced/hugo-export/#librarymd","title":"library.md","text":"<ul> <li><code>title</code>: Library title</li> <li><code>books</code>: All books in the library</li> <li><code>stats</code>: Library statistics dictionary</li> </ul>"},{"location":"advanced/hugo-export/#hugo-configuration","title":"Hugo Configuration","text":"<p>To fully utilize the exported library, configure your Hugo site:</p>"},{"location":"advanced/hugo-export/#1-add-library-section","title":"1. Add Library Section","text":"<p>In <code>config.toml</code>: <pre><code>[[menu.main]]\n  name = \"Library\"\n  url = \"/library/\"\n  weight = 10\n</code></pre></p>"},{"location":"advanced/hugo-export/#2-create-custom-layouts","title":"2. Create Custom Layouts","text":"<p>Create <code>layouts/library/single.html</code> for book pages: <pre><code>{{ define \"main\" }}\n&lt;article class=\"book-page\"&gt;\n  &lt;h1&gt;{{ .Title }}&lt;/h1&gt;\n\n  {{ with .Params.cover_image }}\n    &lt;img src=\"{{ . }}\" alt=\"Book cover\" class=\"book-cover\"&gt;\n  {{ end }}\n\n  &lt;div class=\"book-meta\"&gt;\n    {{ with .Params.creators_display }}\n      &lt;p&gt;By {{ delimit . \", \" }}&lt;/p&gt;\n    {{ end }}\n\n    {{ with .Params.description }}\n      &lt;div class=\"description\"&gt;{{ . | markdownify }}&lt;/div&gt;\n    {{ end }}\n  &lt;/div&gt;\n\n  {{ with .Params.ebook_files }}\n    &lt;div class=\"downloads\"&gt;\n      &lt;h3&gt;Download&lt;/h3&gt;\n      {{ range . }}\n        &lt;a href=\"{{ . }}\" class=\"download-btn\"&gt;Download&lt;/a&gt;\n      {{ end }}\n    &lt;/div&gt;\n  {{ end }}\n&lt;/article&gt;\n{{ end }}\n</code></pre></p>"},{"location":"advanced/hugo-export/#3-style-your-library","title":"3. Style Your Library","text":"<p>Add CSS for the book grid and cards: <pre><code>.book-grid {\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));\n  gap: 2rem;\n}\n\n.book-card {\n  border: 1px solid #ddd;\n  padding: 1rem;\n  transition: transform 0.2s;\n}\n\n.book-card:hover {\n  transform: translateY(-5px);\n}\n</code></pre></p>"},{"location":"advanced/hugo-export/#advanced-features","title":"Advanced Features","text":""},{"location":"advanced/hugo-export/#filtering-and-search","title":"Filtering and Search","text":"<p>The exported structure supports Hugo's built-in taxonomy system. You can filter by: - Tags (from subjects) - Authors (from creators) - Years - Languages</p>"},{"location":"advanced/hugo-export/#multiple-views","title":"Multiple Views","text":"<p>Since books can appear in multiple categories (e.g., by subject AND by author), users can browse your library from different perspectives.</p>"},{"location":"advanced/hugo-export/#static-but-dynamic","title":"Static but Dynamic","text":"<p>While Hugo generates static files, the organization allows for client-side filtering and search using JavaScript if desired.</p>"},{"location":"advanced/hugo-export/#example-workflow","title":"Example Workflow","text":"<ol> <li> <p>Import your Calibre library:    <pre><code>ebk import-calibre ~/Calibre ~/my-ebk-library\n</code></pre></p> </li> <li> <p>Export to Hugo with year organization:    <pre><code>ebk export hugo ~/my-ebk-library ~/my-hugo-site --jinja --organize-by year\n</code></pre></p> </li> <li> <p>Build and serve your Hugo site:    <pre><code>cd ~/my-hugo-site\nhugo serve\n</code></pre></p> </li> <li> <p>Visit <code>http://localhost:1313/library/</code> to browse your collection!</p> </li> </ol>"},{"location":"advanced/hugo-export/#tips","title":"Tips","text":"<ul> <li>Use <code>--organize-by subject</code> for topic-based browsing</li> <li>Use <code>--organize-by creator</code> for author-centric libraries</li> <li>Combine with Hugo's search functionality for full-text search</li> <li>The unique_id in URLs ensures no conflicts even with duplicate titles</li> <li>Consider using Hugo's image processing for cover thumbnails</li> </ul>"},{"location":"advanced/symlink-dag/","title":"Symlink DAG Export Documentation","text":"<p>The symlink DAG (Directed Acyclic Graph) export feature creates a navigable directory structure that represents your library's tag hierarchy using symbolic links. This allows you to browse your ebook collection through tag categories using any file explorer or command line interface.</p>"},{"location":"advanced/symlink-dag/#overview","title":"Overview","text":"<p>The symlink DAG export transforms your flat library structure into a hierarchical directory tree where: - Each tag becomes a directory - Hierarchical tags (e.g., \"Programming/Python/Web\") create nested directories - Books appear in all relevant tag directories via symbolic links - The actual files are stored in a central <code>_books</code> directory</p>"},{"location":"advanced/symlink-dag/#usage","title":"Usage","text":""},{"location":"advanced/symlink-dag/#command-line","title":"Command Line","text":"<pre><code># Basic export\nebk export-dag /path/to/library /path/to/output\n\n# Use a different field for categorization (default: subjects)\nebk export-dag /path/to/library /path/to/output --tag-field creators\n\n# Skip copying actual files (only create symlinks to metadata)\nebk export-dag /path/to/library /path/to/output --no-files\n\n# Skip HTML index generation\nebk export-dag /path/to/library /path/to/output --no-index\n</code></pre>"},{"location":"advanced/symlink-dag/#python-api","title":"Python API","text":"<pre><code>from ebk import Library\n\nlib = Library.open(\"/path/to/library\")\n\n# Basic export\nlib.export_to_symlink_dag(\"/path/to/output\")\n\n# Custom options\nlib.export_to_symlink_dag(\n    \"/path/to/output\",\n    tag_field=\"creators\",  # Organize by authors instead of subjects\n    include_files=False,   # Don't copy ebook files\n    create_index=True      # Generate HTML indexes for web browsing\n)\n\n# Chain with other operations\n(lib.filter(lambda e: e.get(\"language\") == \"en\")\n    .export_to_symlink_dag(\"/english-books-dag\"))\n</code></pre>"},{"location":"advanced/symlink-dag/#directory-structure","title":"Directory Structure","text":""},{"location":"advanced/symlink-dag/#example-library","title":"Example Library","text":"<p>Given a library with these books: 1. \"Learn Python\" - Tags: [\"Programming\", \"Programming/Python\", \"Education\"] 2. \"Django Web Development\" - Tags: [\"Programming/Python/Web\", \"Web Development\"] 3. \"Machine Learning Basics\" - Tags: [\"Programming/Python\", \"AI/Machine Learning\"]</p>"},{"location":"advanced/symlink-dag/#generated-structure","title":"Generated Structure","text":"<pre><code>output-directory/\n\u251c\u2500\u2500 README.md                      # Explains the structure\n\u251c\u2500\u2500 _books/                        # Actual files stored here\n\u2502   \u251c\u2500\u2500 book_id_1/\n\u2502   \u2502   \u251c\u2500\u2500 metadata.json\n\u2502   \u2502   \u251c\u2500\u2500 learn_python.pdf\n\u2502   \u2502   \u2514\u2500\u2500 cover.jpg\n\u2502   \u251c\u2500\u2500 book_id_2/\n\u2502   \u2502   \u251c\u2500\u2500 metadata.json\n\u2502   \u2502   \u2514\u2500\u2500 django_web_dev.epub\n\u2502   \u2514\u2500\u2500 book_id_3/\n\u2502       \u251c\u2500\u2500 metadata.json\n\u2502       \u2514\u2500\u2500 ml_basics.pdf\n\u251c\u2500\u2500 Programming/\n\u2502   \u251c\u2500\u2500 index.html                 # Web index for this level\n\u2502   \u251c\u2500\u2500 Learn Python \u2192 ../../_books/book_id_1\n\u2502   \u251c\u2500\u2500 Python/\n\u2502   \u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2502   \u251c\u2500\u2500 Learn Python \u2192 ../../../_books/book_id_1\n\u2502   \u2502   \u251c\u2500\u2500 Machine Learning Basics \u2192 ../../../_books/book_id_3\n\u2502   \u2502   \u2514\u2500\u2500 Web/\n\u2502   \u2502       \u251c\u2500\u2500 index.html\n\u2502   \u2502       \u2514\u2500\u2500 Django Web Development \u2192 ../../../../_books/book_id_2\n\u251c\u2500\u2500 Education/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 Learn Python \u2192 ../../_books/book_id_1\n\u251c\u2500\u2500 Web Development/\n\u2502   \u251c\u2500\u2500 index.html\n\u2502   \u2514\u2500\u2500 Django Web Development \u2192 ../../_books/book_id_2\n\u2514\u2500\u2500 AI/\n    \u251c\u2500\u2500 index.html\n    \u2514\u2500\u2500 Machine Learning/\n        \u251c\u2500\u2500 index.html\n        \u2514\u2500\u2500 Machine Learning Basics \u2192 ../../../_books/book_id_3\n</code></pre>"},{"location":"advanced/symlink-dag/#features","title":"Features","text":""},{"location":"advanced/symlink-dag/#hierarchical-tag-support","title":"Hierarchical Tag Support","text":"<p>Tags containing \"/\" are treated as hierarchical: - \"Programming/Python/Web\" creates three nested levels - Books are accessible at each level of the hierarchy - Allows natural drill-down navigation</p>"},{"location":"advanced/symlink-dag/#multiple-tag-appearances","title":"Multiple Tag Appearances","text":"<p>Books appear in multiple locations: - A book tagged with [\"Programming\", \"Education\"] appears in both directories - Symlinks ensure no file duplication - Changes to files are reflected everywhere</p>"},{"location":"advanced/symlink-dag/#web-navigation","title":"Web Navigation","text":"<p>When <code>create_index</code> is enabled: - Each directory contains an <code>index.html</code> file - Browse the structure in a web browser - Navigate between parent/child categories - Direct links to open book directories</p>"},{"location":"advanced/symlink-dag/#readable-names","title":"Readable Names","text":"<p>Symlinks use human-readable names: - Format: \"Title - First Author\" - Sanitized for filesystem compatibility - Actual files stored by ID in <code>_books</code></p>"},{"location":"advanced/symlink-dag/#navigation-methods","title":"Navigation Methods","text":""},{"location":"advanced/symlink-dag/#file-explorer","title":"File Explorer","text":"<ul> <li>Open the output directory in Finder, Windows Explorer, or any file manager</li> <li>Navigate through categories like regular folders</li> <li>Open books by following symlinks</li> </ul>"},{"location":"advanced/symlink-dag/#command-line_1","title":"Command Line","text":"<pre><code># Navigate the structure\ncd /path/to/output\ncd Programming/Python\nls\n\n# Find all Python books\nfind . -name \"*.pdf\" -path \"*/Python/*\"\n</code></pre>"},{"location":"advanced/symlink-dag/#web-browser","title":"Web Browser","text":"<pre><code># Open in default browser\nopen /path/to/output/index.html  # macOS\nxdg-open /path/to/output/index.html  # Linux\nstart /path/to/output/index.html  # Windows\n\n# Or open file:// URL directly\n</code></pre>"},{"location":"advanced/symlink-dag/#platform-considerations","title":"Platform Considerations","text":""},{"location":"advanced/symlink-dag/#linuxmacos","title":"Linux/macOS","text":"<ul> <li>Symlinks work natively</li> <li>No special permissions required</li> <li>Full support for all features</li> </ul>"},{"location":"advanced/symlink-dag/#windows","title":"Windows","text":"<ul> <li>Requires administrator privileges to create symlinks</li> <li>Or enable Developer Mode (Windows 10+)</li> <li>Alternative: Use WSL (Windows Subsystem for Linux)</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.10 or higher</li> <li>pip package manager</li> </ul>"},{"location":"getting-started/installation/#basic-installation","title":"Basic Installation","text":"<p>Install the core ebk package:</p> <pre><code>pip install ebk\n</code></pre>"},{"location":"getting-started/installation/#installation-with-optional-features","title":"Installation with Optional Features","text":""},{"location":"getting-started/installation/#web-dashboard","title":"Web Dashboard","text":"<pre><code>pip install ebk[streamlit]\n</code></pre>"},{"location":"getting-started/installation/#visualization-tools","title":"Visualization Tools","text":"<pre><code>pip install ebk[viz]\n</code></pre>"},{"location":"getting-started/installation/#all-features","title":"All Features","text":"<pre><code>pip install ebk[all]\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<pre><code>pip install ebk[dev]\n</code></pre>"},{"location":"getting-started/installation/#installing-from-source","title":"Installing from Source","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/queelius/ebk.git\ncd ebk\n</code></pre></p> </li> <li> <p>Create a virtual environment (recommended): <pre><code>python -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n</code></pre></p> </li> <li> <p>Install in development mode: <pre><code>pip install -e \".[dev]\"\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#using-the-makefile","title":"Using the Makefile","text":"<p>The project includes a Makefile for common development tasks:</p> <pre><code># Set up complete development environment\nmake setup\n\n# Run tests\nmake test\n\n# Check code coverage\nmake test-coverage\n\n# Format code\nmake format\n\n# Run linting\nmake lint\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>Check that ebk is installed correctly:</p> <pre><code>ebk --version\nebk --help\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Follow the Quick Start Guide to create your first library</li> <li>Read about Configuration options</li> <li>Explore the CLI Reference</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with ebk in just a few minutes.</p>"},{"location":"getting-started/quickstart/#creating-your-first-library","title":"Creating Your First Library","text":""},{"location":"getting-started/quickstart/#from-calibre","title":"From Calibre","text":"<p>If you have an existing Calibre library:</p> <pre><code>ebk import-calibre ~/Calibre/Library --output-dir ~/my-ebooks\n</code></pre>"},{"location":"getting-started/quickstart/#from-raw-ebooks","title":"From Raw eBooks","text":"<p>If you have a folder of PDF/EPUB files:</p> <pre><code>ebk import-ebooks ~/Downloads/ebooks --output-dir ~/my-ebooks\n</code></pre>"},{"location":"getting-started/quickstart/#basic-operations","title":"Basic Operations","text":""},{"location":"getting-started/quickstart/#list-all-books","title":"List All Books","text":"<pre><code>ebk list ~/my-ebooks\n</code></pre>"},{"location":"getting-started/quickstart/#search-for-books","title":"Search for Books","text":"<pre><code># Search by title\nebk search \"Python\" ~/my-ebooks\n\n# Search in multiple fields\nebk search \"Machine Learning\" ~/my-ebooks --regex-fields title subjects\n\n# Advanced JMESPath query\nebk search \"[?language=='en' &amp;&amp; date &gt;= '2020']\" ~/my-ebooks --jmespath\n</code></pre>"},{"location":"getting-started/quickstart/#view-statistics","title":"View Statistics","text":"<pre><code>ebk stats ~/my-ebooks\n</code></pre>"},{"location":"getting-started/quickstart/#using-the-python-api","title":"Using the Python API","text":"<pre><code>from ebk import Library\n\n# Open your library\nlib = Library.open(\"~/my-ebooks\")\n\n# Search for books\npython_books = lib.search(\"Python\")\nfor book in python_books:\n    print(f\"{book.title} by {', '.join(book.creators)}\")\n\n# Add a new book\nlib.add_entry(\n    title=\"Deep Learning\",\n    creators=[\"Ian Goodfellow\", \"Yoshua Bengio\"],\n    subjects=[\"Machine Learning\", \"Neural Networks\"],\n    language=\"en\"\n).save()\n\n# Find similar books\nsimilar = lib.find_similar(python_books[0].id)\n\n# Export to Hugo\nlib.export_to_hugo(\"~/my-blog\", organize_by=\"subject\")\n</code></pre>"},{"location":"getting-started/quickstart/#launching-the-web-interface","title":"Launching the Web Interface","text":"<p>If you installed with the streamlit extra:</p> <pre><code>pip install ebk[streamlit]\nstreamlit run -m ebk.integrations.streamlit.app -- ~/my-ebooks\n</code></pre> <p>Then open http://localhost:8501 in your browser.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about advanced search options</li> <li>Explore import/export formats</li> <li>Discover library management features</li> <li>Set up integrations</li> </ul>"}]}